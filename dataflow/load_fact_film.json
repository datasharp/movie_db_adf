{
	"name": "load_fact_film",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "stg_film",
						"type": "DatasetReference"
					},
					"name": "stgfilm"
				},
				{
					"dataset": {
						"referenceName": "map_director",
						"type": "DatasetReference"
					},
					"name": "mapdirector"
				},
				{
					"dataset": {
						"referenceName": "map_year",
						"type": "DatasetReference"
					},
					"name": "mapyear"
				},
				{
					"dataset": {
						"referenceName": "map_film",
						"type": "DatasetReference"
					},
					"name": "mapfilm"
				},
				{
					"dataset": {
						"referenceName": "fact_film",
						"type": "DatasetReference"
					},
					"name": "targetFactFilm"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "fact_film",
						"type": "DatasetReference"
					},
					"name": "insertFactFilm"
				},
				{
					"dataset": {
						"referenceName": "fact_film",
						"type": "DatasetReference"
					},
					"name": "updateFactFilm"
				}
			],
			"transformations": [
				{
					"name": "joinMapDirector"
				},
				{
					"name": "joinMapYear"
				},
				{
					"name": "joinMapFilm"
				},
				{
					"name": "selectColumns"
				},
				{
					"name": "RemoveColumns",
					"description": "Autogenerated by data preview actions"
				},
				{
					"name": "selectColumnsFinal"
				},
				{
					"name": "notExistsInsert"
				},
				{
					"name": "existsUpdate"
				},
				{
					"name": "updateIf"
				}
			],
			"scriptLines": [
				"source(output(",
				"          film_id as integer,",
				"          title as string,",
				"          description as string,",
				"          director as string,",
				"          film_year as integer,",
				"          runtime_minutes as integer,",
				"          rating as double,",
				"          votes as integer,",
				"          revenue_millions as double,",
				"          metascore as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> stgfilm",
				"source(output(",
				"          director_id as integer,",
				"          director as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> mapdirector",
				"source(output(",
				"          year_id as integer,",
				"          year as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> mapyear",
				"source(output(",
				"          film_id as integer,",
				"          title as string,",
				"          film_year as integer,",
				"          director as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> mapfilm",
				"source(output(",
				"          runtime_minutes as double,",
				"          rating as double,",
				"          revenue_millions as double,",
				"          votes as integer,",
				"          metascore as integer,",
				"          film_id as integer,",
				"          director_id as integer,",
				"          year_id as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> targetFactFilm",
				"stgfilm, mapdirector join(stgfilm@director == mapdirector@director,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinMapDirector",
				"joinMapDirector, mapyear join(film_year == year_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinMapYear",
				"joinMapYear, mapfilm join(stgfilm@film_id == mapfilm@film_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinMapFilm",
				"joinMapFilm select(mapColumn(",
				"          film_id = stgfilm@film_id,",
				"          title = stgfilm@title,",
				"          description,",
				"          director = stgfilm@director,",
				"          film_year = stgfilm@film_year,",
				"          runtime_minutes,",
				"          rating,",
				"          votes,",
				"          revenue_millions,",
				"          metascore,",
				"          film_id = mapfilm@film_id,",
				"          director_id,",
				"          director = mapdirector@director,",
				"          year_id = mapfilm@film_id",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectColumns",
				"selectColumns select(mapColumn(",
				"          film_id,",
				"          runtime_minutes,",
				"          rating,",
				"          votes,",
				"          revenue_millions,",
				"          metascore,",
				"          director_id,",
				"          year_id",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RemoveColumns",
				"RemoveColumns select(mapColumn(",
				"          film_id,",
				"          runtime_minutes,",
				"          rating,",
				"          votes,",
				"          revenue_millions,",
				"          metascore,",
				"          director_id,",
				"          year_id",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectColumnsFinal",
				"selectColumnsFinal, targetFactFilm exists(selectColumnsFinal@film_id == targetFactFilm@film_id,",
				"     negate:true,",
				"     broadcast: 'auto')~> notExistsInsert",
				"selectColumnsFinal, targetFactFilm join(selectColumnsFinal@film_id == targetFactFilm@film_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> existsUpdate",
				"existsUpdate alterRow(updateIf(notEquals(iifNull(selectColumnsFinal@runtime_minutes,-1,selectColumnsFinal@runtime_minutes),iifNull(targetFactFilm@runtime_minutes,-1,targetFactFilm@runtime_minutes))),",
				"     updateIf(notEquals(iifNull(selectColumnsFinal@rating,-1,selectColumnsFinal@rating),iifNull(targetFactFilm@rating,-1,targetFactFilm@rating))),",
				"     updateIf(notEquals(iifNull(selectColumnsFinal@votes,-1,selectColumnsFinal@votes),iifNull(targetFactFilm@votes,-1,targetFactFilm@votes))),",
				"     updateIf(notEquals(iifNull(selectColumnsFinal@revenue_millions,-1,selectColumnsFinal@revenue_millions),iifNull(targetFactFilm@revenue_millions,-1,targetFactFilm@revenue_millions))),",
				"     updateIf(notEquals(iifNull(selectColumnsFinal@metascore,-1,selectColumnsFinal@metascore),iifNull(targetFactFilm@metascore,-1,targetFactFilm@metascore)))) ~> updateIf",
				"notExistsInsert sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          runtime_minutes as double,",
				"          rating as double,",
				"          revenue_millions as double,",
				"          votes as integer,",
				"          metascore as integer,",
				"          film_id as integer,",
				"          director_id as integer,",
				"          year_id as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     batchSize: 100,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          runtime_minutes,",
				"          rating,",
				"          revenue_millions,",
				"          votes,",
				"          metascore,",
				"          film_id,",
				"          director_id,",
				"          year_id",
				"     )) ~> insertFactFilm",
				"updateIf sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          runtime_minutes as double,",
				"          rating as double,",
				"          revenue_millions as double,",
				"          votes as integer,",
				"          metascore as integer,",
				"          film_id as integer,",
				"          director_id as integer,",
				"          year_id as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['film_id'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          runtime_minutes = selectColumnsFinal@runtime_minutes,",
				"          rating = selectColumnsFinal@rating,",
				"          revenue_millions = selectColumnsFinal@revenue_millions,",
				"          votes = selectColumnsFinal@votes,",
				"          metascore = selectColumnsFinal@metascore,",
				"          film_id = targetFactFilm@film_id,",
				"          director_id = targetFactFilm@director_id,",
				"          year_id = targetFactFilm@year_id",
				"     )) ~> updateFactFilm"
			]
		}
	}
}