{
	"name": "load_stg_genre",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "move_db_landing",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "map_genre",
						"type": "DatasetReference"
					},
					"name": "mapgenre"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "stg_genre",
						"type": "DatasetReference"
					},
					"name": "sinkStgGenre"
				}
			],
			"transformations": [
				{
					"name": "splitGenre"
				},
				{
					"name": "flattenGenre"
				},
				{
					"name": "distinctGenre"
				},
				{
					"name": "selectGenre"
				},
				{
					"name": "trimGenre"
				},
				{
					"name": "joinMapGenre"
				},
				{
					"name": "selectGenreGenreId"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Rank as integer,",
				"          Title as string,",
				"          Genre as string,",
				"          Description as string,",
				"          Director as string,",
				"          Actors as string,",
				"          Year as integer,",
				"          Runtime_Minutes as integer,",
				"          Rating as double,",
				"          Votes as integer,",
				"          Revenue_Millions as double,",
				"          Metascore as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source1",
				"source(output(",
				"          genre_id as integer,",
				"          genre as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> mapgenre",
				"source1 derive(Genre = split(Genre, ',')) ~> splitGenre",
				"splitGenre foldDown(unroll(Genre),",
				"     mapColumn(",
				"          Rank,",
				"          Title,",
				"          Genre,",
				"          Description,",
				"          Director,",
				"          Actors,",
				"          Year,",
				"          {Runtime (Minutes)},",
				"          Rating,",
				"          Votes,",
				"          {Revenue (Millions)},",
				"          Metascore",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flattenGenre",
				"trimGenre aggregate(groupBy(Genre),",
				"     each(match(name=='Rank'), $$ = first($$))) ~> distinctGenre",
				"distinctGenre select(mapColumn(",
				"          Genre",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectGenre",
				"flattenGenre derive(Genre = trim(Genre)) ~> trimGenre",
				"selectGenre, mapgenre join(selectGenre@Genre == mapgenre@genre,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinMapGenre",
				"joinMapGenre select(mapColumn(",
				"          Genre = selectGenre@Genre,",
				"          genre_id",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectGenreGenreId",
				"selectGenreGenreId sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          genre_id as integer,",
				"          genre as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          genre_id,",
				"          genre = Genre",
				"     )) ~> sinkStgGenre"
			]
		}
	}
}