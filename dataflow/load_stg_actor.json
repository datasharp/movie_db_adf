{
	"name": "load_stg_actor",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "blob_land_movies",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "map_actor",
						"type": "DatasetReference"
					},
					"name": "mapactor"
				},
				{
					"dataset": {
						"referenceName": "stg_actor",
						"type": "DatasetReference"
					},
					"name": "stgactor"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "stg_actor",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "stg_actor",
						"type": "DatasetReference"
					},
					"name": "updatestgactor"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "flatten1"
				},
				{
					"name": "cleanActors"
				},
				{
					"name": "join1"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "select1"
				},
				{
					"name": "notexistsinsert"
				},
				{
					"name": "updateif"
				},
				{
					"name": "existsupdate"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Rank as string,",
				"          Title as string,",
				"          Genre as string,",
				"          Description as string,",
				"          Director as string,",
				"          Actors as string,",
				"          Year as string,",
				"          {Runtime (Minutes)} as string,",
				"          Rating as string,",
				"          Votes as string,",
				"          {Revenue (Millions)} as string,",
				"          Metascore as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          actor_id as integer,",
				"          actor as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> mapactor",
				"source(output(",
				"          actor_id as integer,",
				"          actor as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> stgactor",
				"source1 derive(Actors = split(Actors, ',')) ~> derivedColumn1",
				"derivedColumn1 foldDown(unroll(Actors),",
				"     mapColumn(",
				"          Rank,",
				"          Title,",
				"          Genre,",
				"          Description,",
				"          Director,",
				"          Actors,",
				"          Year,",
				"          {Runtime (Minutes)},",
				"          Rating,",
				"          Votes,",
				"          {Revenue (Millions)},",
				"          Metascore",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten1",
				"flatten1 derive(Actors = trim(Actors)) ~> cleanActors",
				"cleanActors, mapactor join(Actors == actor,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 aggregate(groupBy(Actors),",
				"     each(match(name!='Actors'), $$ = first($$))) ~> aggregate1",
				"aggregate1 select(mapColumn(",
				"          actor_id,",
				"          actor",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1, stgactor exists(select1@actor_id == stgactor@actor_id,",
				"     negate:true,",
				"     broadcast: 'auto')~> notexistsinsert",
				"existsupdate alterRow(updateIf(notEquals(iifNull(stgactor@actor,'NULL',stgactor@actor ),iifNull(select1@actor, 'NULL', select1@actor)))) ~> updateif",
				"select1, stgactor join(select1@actor_id == stgactor@actor_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> existsupdate",
				"notexistsinsert sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          actor_id as integer,",
				"          actor as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     batchSize: 100,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink1",
				"updateif sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          actor_id as integer,",
				"          actor as string",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['actor_id'],",
				"     format: 'table',",
				"     batchSize: 100,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          actor_id = select1@actor_id,",
				"          actor = select1@actor",
				"     )) ~> updatestgactor"
			]
		}
	}
}