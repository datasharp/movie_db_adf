{
	"name": "load_map_dir",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "move_db_landing",
						"type": "DatasetReference"
					},
					"name": "landingmovies"
				},
				{
					"dataset": {
						"referenceName": "map_film",
						"type": "DatasetReference"
					},
					"name": "mapfilm"
				},
				{
					"dataset": {
						"referenceName": "map_director",
						"type": "DatasetReference"
					},
					"name": "mapdirector"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "map_director",
						"type": "DatasetReference"
					},
					"name": "sinkMapDirector"
				},
				{
					"dataset": {
						"referenceName": "map_director",
						"type": "DatasetReference"
					},
					"name": "insertMapDirector"
				}
			],
			"transformations": [
				{
					"name": "joinMapFilm"
				},
				{
					"name": "distinctDirector"
				},
				{
					"name": "selectFilmIdDirector"
				},
				{
					"name": "existsUpdate"
				},
				{
					"name": "updateIf"
				},
				{
					"name": "notExistsInsert"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Rank as integer,",
				"          Title as string,",
				"          Genre as string,",
				"          Description as string,",
				"          Director as string,",
				"          Actors as string,",
				"          Year as integer,",
				"          Runtime_Minutes as integer,",
				"          Rating as double,",
				"          Votes as integer,",
				"          Revenue_Millions as double,",
				"          Metascore as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> landingmovies",
				"source(output(",
				"          film_id as integer,",
				"          title as string,",
				"          film_year as integer,",
				"          director as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> mapfilm",
				"source(output(",
				"          director_id as integer,",
				"          director as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> mapdirector",
				"landingmovies, mapfilm join(landingmovies@Title == mapfilm@title",
				"     && Year == film_year",
				"     && landingmovies@Director == mapfilm@director,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinMapFilm",
				"selectFilmIdDirector aggregate(groupBy(director),",
				"     each(match(name!='director'), $$ = first($$))) ~> distinctDirector",
				"joinMapFilm select(mapColumn(",
				"          film_id,",
				"          director = landingmovies@Director",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectFilmIdDirector",
				"distinctDirector, mapdirector join(distinctDirector@director == mapdirector@director,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> existsUpdate",
				"existsUpdate alterRow(updateIf(notEquals(iifNull(mapdirector@director,'NULL',mapdirector@director),iifNull(distinctDirector@director,'NULL',distinctDirector@director)))) ~> updateIf",
				"distinctDirector, mapdirector exists(distinctDirector@director == mapdirector@director,",
				"     negate:false,",
				"     broadcast: 'auto')~> notExistsInsert",
				"updateIf sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          director_id as integer,",
				"          director as string",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['director_id'],",
				"     format: 'table',",
				"     batchSize: 100,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          director = distinctDirector@director,",
				"          director_id",
				"     )) ~> sinkMapDirector",
				"notExistsInsert sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          director_id as integer,",
				"          director as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     batchSize: 100,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          director",
				"     )) ~> insertMapDirector"
			]
		}
	}
}