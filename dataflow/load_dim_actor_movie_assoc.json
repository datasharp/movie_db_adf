{
	"name": "load_dim_actor_movie_assoc",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "stg_actor_film_assoc",
						"type": "DatasetReference"
					},
					"name": "stgactorfilmassoc"
				},
				{
					"dataset": {
						"referenceName": "dim_actor_movie_assoc",
						"type": "DatasetReference"
					},
					"name": "targetdimactorfilmassoc"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "dim_actor_movie_assoc",
						"type": "DatasetReference"
					},
					"name": "sinkDimActorFilmAssoc"
				},
				{
					"dataset": {
						"referenceName": "dim_actor_movie_assoc",
						"type": "DatasetReference"
					},
					"name": "updateDimActorFilmAssoc"
				}
			],
			"transformations": [
				{
					"name": "notExistsInsert"
				},
				{
					"name": "existsUpdate"
				},
				{
					"name": "updateIf"
				}
			],
			"scriptLines": [
				"source(output(",
				"          stg_actor_film_id as integer,",
				"          actor_id as integer,",
				"          film_id as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> stgactorfilmassoc",
				"source(output(",
				"          dim_actor_movie_assoc_id as integer,",
				"          actor_id as integer,",
				"          film_id as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> targetdimactorfilmassoc",
				"stgactorfilmassoc, targetdimactorfilmassoc exists(stg_actor_film_id == dim_actor_movie_assoc_id,",
				"     negate:true,",
				"     broadcast: 'auto')~> notExistsInsert",
				"stgactorfilmassoc, targetdimactorfilmassoc join(stg_actor_film_id == dim_actor_movie_assoc_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> existsUpdate",
				"existsUpdate alterRow(updateIf(notEquals(iifNull(stgactorfilmassoc@actor_id,-1,stgactorfilmassoc@actor_id),iifNull(targetdimactorfilmassoc@actor_id,-1,targetdimactorfilmassoc@actor_id)))) ~> updateIf",
				"notExistsInsert sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          dim_actor_movie_assoc_id as integer,",
				"          actor_id as integer,",
				"          film_id as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     batchSize: 100,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          dim_actor_movie_assoc_id = stg_actor_film_id,",
				"          actor_id,",
				"          film_id",
				"     )) ~> sinkDimActorFilmAssoc",
				"updateIf sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          dim_actor_movie_assoc_id as integer,",
				"          actor_id as integer,",
				"          film_id as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['dim_actor_movie_assoc_id'],",
				"     format: 'table',",
				"     batchSize: 100,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          dim_actor_movie_assoc_id,",
				"          actor_id = stgactorfilmassoc@actor_id,",
				"          film_id = stgactorfilmassoc@film_id",
				"     )) ~> updateDimActorFilmAssoc"
			]
		}
	}
}