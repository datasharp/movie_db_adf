{
	"name": "load_map_actor",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "blob_land_movies",
						"type": "DatasetReference"
					},
					"name": "bloblandmovies"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "map_actor",
						"type": "DatasetReference"
					},
					"name": "loadintomapactors"
				}
			],
			"transformations": [
				{
					"name": "splitActors"
				},
				{
					"name": "flattenActors"
				},
				{
					"name": "aggOnActors"
				},
				{
					"name": "selectActors"
				},
				{
					"name": "cleanActors"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Rank as string,",
				"          Title as string,",
				"          Genre as string,",
				"          Description as string,",
				"          Director as string,",
				"          Actors as string,",
				"          Year as string,",
				"          {Runtime (Minutes)} as string,",
				"          Rating as string,",
				"          Votes as string,",
				"          {Revenue (Millions)} as string,",
				"          Metascore as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> bloblandmovies",
				"bloblandmovies derive(Actors = split(Actors, ',')) ~> splitActors",
				"splitActors foldDown(unroll(Actors),",
				"     mapColumn(",
				"          Rank,",
				"          Title,",
				"          Genre,",
				"          Description,",
				"          Director,",
				"          Actors,",
				"          Year,",
				"          {Runtime (Minutes)},",
				"          Rating,",
				"          Votes,",
				"          {Revenue (Millions)},",
				"          Metascore",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flattenActors",
				"cleanActors aggregate(groupBy(Actors),",
				"     each(match(name=='Rank'), $$ = first($$))) ~> aggOnActors",
				"aggOnActors select(mapColumn(",
				"          Actors",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectActors",
				"flattenActors derive(Actors = trim(Actors)) ~> cleanActors",
				"selectActors sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          actor_id as integer,",
				"          actor as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          actor = Actors",
				"     )) ~> loadintomapactors"
			]
		}
	}
}