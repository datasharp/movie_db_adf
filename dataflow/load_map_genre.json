{
	"name": "load_map_genre",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "move_db_landing",
						"type": "DatasetReference"
					},
					"name": "landingmovies"
				},
				{
					"dataset": {
						"referenceName": "map_genre",
						"type": "DatasetReference"
					},
					"name": "targetMapGenre"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "map_genre",
						"type": "DatasetReference"
					},
					"name": "insertMapGenre"
				},
				{
					"dataset": {
						"referenceName": "map_genre",
						"type": "DatasetReference"
					},
					"name": "updateMapGenre"
				}
			],
			"transformations": [
				{
					"name": "splitGenre"
				},
				{
					"name": "flattenGenre"
				},
				{
					"name": "distinctGenre"
				},
				{
					"name": "selectGenre"
				},
				{
					"name": "trimGenre"
				},
				{
					"name": "notExistsInsert"
				},
				{
					"name": "existsUpdate"
				},
				{
					"name": "updateIf"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Rank as integer,",
				"          Title as string,",
				"          Genre as string,",
				"          Description as string,",
				"          Director as string,",
				"          Actors as string,",
				"          Year as integer,",
				"          Runtime_Minutes as integer,",
				"          Rating as double,",
				"          Votes as integer,",
				"          Revenue_Millions as double,",
				"          Metascore as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> landingmovies",
				"source(output(",
				"          genre_id as integer,",
				"          genre as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> targetMapGenre",
				"landingmovies derive(Genre = split(Genre, ',')) ~> splitGenre",
				"splitGenre foldDown(unroll(Genre),",
				"     mapColumn(",
				"          Rank,",
				"          Title,",
				"          Genre,",
				"          Description,",
				"          Director,",
				"          Actors,",
				"          Year,",
				"          {Runtime (Minutes)} = Runtime_Minutes,",
				"          Rating,",
				"          Votes,",
				"          {Revenue (Millions)} = Revenue_Millions,",
				"          Metascore",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flattenGenre",
				"trimGenre aggregate(groupBy(Genre),",
				"     each(match(name=='Rank'), $$ = first($$))) ~> distinctGenre",
				"distinctGenre select(mapColumn(",
				"          Genre",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectGenre",
				"flattenGenre derive(Genre = trim(Genre)) ~> trimGenre",
				"selectGenre, targetMapGenre exists(selectGenre@Genre == targetMapGenre@genre,",
				"     negate:true,",
				"     broadcast: 'auto')~> notExistsInsert",
				"selectGenre, targetMapGenre join(selectGenre@Genre == targetMapGenre@genre,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> existsUpdate",
				"existsUpdate alterRow(updateIf(notEquals(iifNull(selectGenre@Genre,'NULL',selectGenre@Genre),iifNull(targetMapGenre@genre,'NULL',targetMapGenre@genre)))) ~> updateIf",
				"notExistsInsert sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          genre_id as integer,",
				"          genre as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     batchSize: 100,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          genre = Genre",
				"     )) ~> insertMapGenre",
				"updateIf sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          genre_id as integer,",
				"          genre as string",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['genre_id'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          genre_id,",
				"          genre = selectGenre@Genre",
				"     )) ~> updateMapGenre"
			]
		}
	}
}