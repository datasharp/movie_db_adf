{
	"name": "load_map_year",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "move_db_landing",
						"type": "DatasetReference"
					},
					"name": "landingmovies"
				},
				{
					"dataset": {
						"referenceName": "map_year",
						"type": "DatasetReference"
					},
					"name": "targetMapYear"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "map_year",
						"type": "DatasetReference"
					},
					"name": "insertMapYear"
				},
				{
					"dataset": {
						"referenceName": "map_year",
						"type": "DatasetReference"
					},
					"name": "updateMapYear"
				}
			],
			"transformations": [
				{
					"name": "selectYear"
				},
				{
					"name": "distinctYear"
				},
				{
					"name": "notExistsInsert"
				},
				{
					"name": "existsUpdate"
				},
				{
					"name": "updateIf"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Rank as integer,",
				"          Title as string,",
				"          Genre as string,",
				"          Description as string,",
				"          Director as string,",
				"          Actors as string,",
				"          Year as integer,",
				"          Runtime_Minutes as integer,",
				"          Rating as double,",
				"          Votes as integer,",
				"          Revenue_Millions as double,",
				"          Metascore as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> landingmovies",
				"source(output(",
				"          year_id as integer,",
				"          year as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> targetMapYear",
				"landingmovies select(mapColumn(",
				"          year = Year",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectYear",
				"selectYear aggregate(groupBy(year),",
				"     each(match(name!='year'), $$ = first($$))) ~> distinctYear",
				"distinctYear, targetMapYear exists(distinctYear@year == targetMapYear@year,",
				"     negate:true,",
				"     broadcast: 'auto')~> notExistsInsert",
				"distinctYear, targetMapYear join(distinctYear@year == targetMapYear@year,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> existsUpdate",
				"existsUpdate alterRow(updateIf(notEquals(iifNull(targetMapYear@year,-1,targetMapYear@year),iifNull(distinctYear@year,-1,distinctYear@year)))) ~> updateIf",
				"notExistsInsert sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          year_id as integer,",
				"          year as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     batchSize: 100,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          year",
				"     )) ~> insertMapYear",
				"updateIf sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          year_id as integer,",
				"          year as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['year_id'],",
				"     format: 'table',",
				"     batchSize: 100,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          year_id,",
				"          year = distinctYear@year",
				"     )) ~> updateMapYear"
			]
		}
	}
}