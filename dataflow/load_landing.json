{
	"name": "load_landing",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "blob_land_movies",
						"type": "DatasetReference"
					},
					"name": "bloblanding"
				},
				{
					"dataset": {
						"referenceName": "move_db_landing",
						"type": "DatasetReference"
					},
					"name": "landingmoviesdbtarget"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "move_db_landing",
						"type": "DatasetReference"
					},
					"name": "updatelandingmoviesdb"
				},
				{
					"dataset": {
						"referenceName": "move_db_landing",
						"type": "DatasetReference"
					},
					"name": "insertland"
				}
			],
			"transformations": [
				{
					"name": "existsupdate"
				},
				{
					"name": "updateif"
				},
				{
					"name": "notexistsinsert"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Rank as string,",
				"          Title as string,",
				"          Genre as string,",
				"          Description as string,",
				"          Director as string,",
				"          Actors as string,",
				"          Year as string,",
				"          {Runtime (Minutes)} as string,",
				"          Rating as string,",
				"          Votes as string,",
				"          {Revenue (Millions)} as string,",
				"          Metascore as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> bloblanding",
				"source(output(",
				"          Rank as integer,",
				"          Title as string,",
				"          Genre as string,",
				"          Description as string,",
				"          Director as string,",
				"          Actors as string,",
				"          Year as integer,",
				"          Runtime_Minutes as integer,",
				"          Rating as double,",
				"          Votes as integer,",
				"          Revenue_Millions as double,",
				"          Metascore as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> landingmoviesdbtarget",
				"bloblanding, landingmoviesdbtarget join(bloblanding@Title == landingmoviesdbtarget@Title",
				"     && toInteger(bloblanding@Year) == landingmoviesdbtarget@Year",
				"     && bloblanding@Director == landingmoviesdbtarget@Director,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> existsupdate",
				"existsupdate alterRow(updateIf(notEquals(iifNull(toInteger(bloblanding@Rank),-1,toInteger(bloblanding@Rank)),iifNull(landingmoviesdbtarget@Rank,-1,landingmoviesdbtarget@Rank))",
				"",
				"",
				"",
				"",
				"",
				"),",
				"     updateIf(notEquals(iifNull(bloblanding@Title,'NULL',bloblanding@Title),iifNull(landingmoviesdbtarget@Title,'NULL',landingmoviesdbtarget@Title))),",
				"     updateIf(notEquals(iifNull(bloblanding@Genre,'NULL',bloblanding@Genre),iifNull(landingmoviesdbtarget@Genre,'NULL',landingmoviesdbtarget@Genre))",
				"),",
				"     updateIf(notEquals(iifNull(bloblanding@Description,'NULL',bloblanding@Description),iifNull(landingmoviesdbtarget@Description,'NULL',landingmoviesdbtarget@Description))",
				"),",
				"     updateIf(notEquals(iifNull(bloblanding@Director,'NULL',bloblanding@Director),iifNull(landingmoviesdbtarget@Director,'NULL',landingmoviesdbtarget@Director))),",
				"     updateIf(notEquals(iifNull(bloblanding@Actors,'NULL',bloblanding@Actors),iifNull(landingmoviesdbtarget@Actors,'NULL',landingmoviesdbtarget@Actors))),",
				"     updateIf(notEquals(iifNull(toInteger(bloblanding@Year),-1,toInteger(bloblanding@Year)),iifNull(landingmoviesdbtarget@Year,-1,landingmoviesdbtarget@Year))),",
				"     updateIf(notEquals(iifNull(toInteger({Runtime (Minutes)}),-1,toInteger({Runtime (Minutes)})),iifNull(Runtime_Minutes,-1,Runtime_Minutes))),",
				"     updateIf(notEquals(iifNull(toInteger(bloblanding@Rating),-1,toInteger(bloblanding@Rating)),iifNull(landingmoviesdbtarget@Rating,-1,landingmoviesdbtarget@Rating))),",
				"     updateIf(notEquals(iifNull(toInteger(bloblanding@Votes),-1,toInteger(bloblanding@Votes)),iifNull(landingmoviesdbtarget@Votes,-1,landingmoviesdbtarget@Votes))),",
				"     updateIf(notEquals(iifNull(toInteger(bloblanding@Metascore),-1,toInteger(bloblanding@Metascore)),iifNull(landingmoviesdbtarget@Metascore,-1,landingmoviesdbtarget@Metascore))),",
				"     updateIf(notEquals(iifNull(toInteger({Revenue (Millions)}),-1,toInteger({Revenue (Millions)})),iifNull(Revenue_Millions,-1,Revenue_Millions)))) ~> updateif",
				"bloblanding, landingmoviesdbtarget exists(toInteger(bloblanding@Year) == landingmoviesdbtarget@Year",
				"     && bloblanding@Director == landingmoviesdbtarget@Director",
				"     && bloblanding@Title == landingmoviesdbtarget@Title,",
				"     negate:true,",
				"     broadcast: 'auto')~> notexistsinsert",
				"updateif sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Rank as integer,",
				"          Title as string,",
				"          Genre as string,",
				"          Description as string,",
				"          Director as string,",
				"          Actors as string,",
				"          Year as integer,",
				"          Runtime_Minutes as integer,",
				"          Rating as double,",
				"          Votes as integer,",
				"          Revenue_Millions as double,",
				"          Metascore as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          Rank,",
				"          Title,",
				"          Genre,",
				"          Description,",
				"          Director,",
				"          Actors,",
				"          Year,",
				"          Runtime_Minutes = {Runtime (Minutes)},",
				"          Rating,",
				"          Votes,",
				"          Revenue_Millions = {Revenue (Millions)},",
				"          Metascore",
				"     )) ~> updatelandingmoviesdb",
				"notexistsinsert sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Rank as integer,",
				"          Title as string,",
				"          Genre as string,",
				"          Description as string,",
				"          Director as string,",
				"          Actors as string,",
				"          Year as integer,",
				"          Runtime_Minutes as integer,",
				"          Rating as double,",
				"          Votes as integer,",
				"          Revenue_Millions as double,",
				"          Metascore as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          Rank,",
				"          Title,",
				"          Genre,",
				"          Description,",
				"          Director,",
				"          Actors,",
				"          Year,",
				"          Runtime_Minutes = {Runtime (Minutes)},",
				"          Rating,",
				"          Votes,",
				"          Revenue_Millions = {Revenue (Millions)},",
				"          Metascore",
				"     )) ~> insertland"
			]
		}
	}
}