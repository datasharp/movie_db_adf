{
	"name": "load_stg_actor_film_assoc",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "move_db_landing",
						"type": "DatasetReference"
					},
					"name": "landingmovies"
				},
				{
					"dataset": {
						"referenceName": "map_actor",
						"type": "DatasetReference"
					},
					"name": "mapactor"
				},
				{
					"dataset": {
						"referenceName": "map_film",
						"type": "DatasetReference"
					},
					"name": "mapfilm"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "stg_actor_film_assoc",
						"type": "DatasetReference"
					},
					"name": "insertStgActorFilmAssoc"
				}
			],
			"transformations": [
				{
					"name": "actorsSplit"
				},
				{
					"name": "flattenActors"
				},
				{
					"name": "trimActors"
				},
				{
					"name": "joinMapFilm"
				},
				{
					"name": "selectActorsTitleYearDIr"
				},
				{
					"name": "joinMapActor"
				},
				{
					"name": "actorsFilmId"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Rank as integer,",
				"          Title as string,",
				"          Genre as string,",
				"          Description as string,",
				"          Director as string,",
				"          Actors as string,",
				"          Year as integer,",
				"          Runtime_Minutes as integer,",
				"          Rating as double,",
				"          Votes as integer,",
				"          Revenue_Millions as double,",
				"          Metascore as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> landingmovies",
				"source(output(",
				"          actor_id as integer,",
				"          actor as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> mapactor",
				"source(output(",
				"          film_id as integer,",
				"          title as string,",
				"          film_year as integer,",
				"          director as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> mapfilm",
				"landingmovies derive(Actors = split(Actors, ',')) ~> actorsSplit",
				"actorsSplit foldDown(unroll(Actors),",
				"     mapColumn(",
				"          Rank,",
				"          Title,",
				"          Genre,",
				"          Description,",
				"          Director,",
				"          Actors,",
				"          Year,",
				"          {Runtime (Minutes)} = Runtime_Minutes,",
				"          Rating,",
				"          Votes,",
				"          {Revenue (Millions)} = Revenue_Millions,",
				"          Metascore",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flattenActors",
				"flattenActors derive(Actors = trim(Actors)) ~> trimActors",
				"selectActorsTitleYearDIr, mapfilm join(selectActorsTitleYearDIr@Title == mapfilm@title",
				"     && selectActorsTitleYearDIr@Director == mapfilm@director,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinMapFilm",
				"trimActors select(mapColumn(",
				"          Actors,",
				"          Title,",
				"          Director,",
				"          Year",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> selectActorsTitleYearDIr",
				"actorsFilmId, mapactor join(Actors == actor,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'off')~> joinMapActor",
				"joinMapFilm select(mapColumn(",
				"          Actors,",
				"          film_id",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> actorsFilmId",
				"joinMapActor sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          stg_actor_film_id as integer,",
				"          actor_id as integer,",
				"          film_id as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     batchSize: 100,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          actor_id,",
				"          film_id",
				"     )) ~> insertStgActorFilmAssoc"
			]
		}
	}
}