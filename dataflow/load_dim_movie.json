{
	"name": "load_dim_movie",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "stg_film",
						"type": "DatasetReference"
					},
					"name": "stgfilm"
				},
				{
					"dataset": {
						"referenceName": "dim_movie",
						"type": "DatasetReference"
					},
					"name": "targetDimMovie"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "dim_movie",
						"type": "DatasetReference"
					},
					"name": "updateDimMovie"
				},
				{
					"dataset": {
						"referenceName": "dim_movie",
						"type": "DatasetReference"
					},
					"name": "insertDimMovie"
				}
			],
			"transformations": [
				{
					"name": "existsUpdate"
				},
				{
					"name": "notExistsInsert"
				},
				{
					"name": "updateIf"
				}
			],
			"scriptLines": [
				"source(output(",
				"          film_id as integer,",
				"          title as string,",
				"          description as string,",
				"          director as string,",
				"          film_year as integer,",
				"          runtime_minutes as integer,",
				"          rating as double,",
				"          votes as integer,",
				"          revenue_millions as double,",
				"          metascore as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> stgfilm",
				"source(output(",
				"          film_id as integer,",
				"          title as string,",
				"          description as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> targetDimMovie",
				"stgfilm, targetDimMovie join(stgfilm@film_id == targetDimMovie@film_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> existsUpdate",
				"stgfilm, targetDimMovie exists(stgfilm@film_id == targetDimMovie@film_id,",
				"     negate:true,",
				"     broadcast: 'auto')~> notExistsInsert",
				"existsUpdate alterRow(updateIf(notEquals(iifNull(stgfilm@title,'NULL',stgfilm@title),iifNull(targetDimMovie@title,'NULL',targetDimMovie@title))),",
				"     updateIf(notEquals(iifNull(stgfilm@description,'NULL',stgfilm@description),iifNull(targetDimMovie@description,'NULL',targetDimMovie@description)))) ~> updateIf",
				"updateIf sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          film_id as integer,",
				"          title as string,",
				"          description as string",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['film_id'],",
				"     format: 'table',",
				"     batchSize: 100,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          film_id = targetDimMovie@film_id,",
				"          title = stgfilm@title,",
				"          description = stgfilm@description",
				"     )) ~> updateDimMovie",
				"notExistsInsert sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          film_id as integer,",
				"          title as string,",
				"          description as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     batchSize: 100,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          film_id,",
				"          title,",
				"          description",
				"     )) ~> insertDimMovie"
			]
		}
	}
}